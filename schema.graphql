# Autogenerated input type of BuyCurrency
input BuyCurrencyInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The id of the publication to buy from
  publication_id: String!

  # The currency to use for payments
  currency: Currencies!
}

# Autogenerated return type of BuyCurrency
type BuyCurrencyPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  publication: Publication
  user: User
}

# Autogenerated input type of CreatePublication
input CreatePublicationInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  title: String!
  description: String!
  amount: Float!
  currency: Currencies!
}

# Autogenerated return type of CreatePublication
type CreatePublicationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  publication: Publication
}

# Supported currencies
enum Currencies {
  # Bitcoin
  BTC

  # $
  USD
}

# The root type for mutations
type Mutation {
  # Buys from a publication
  buyCurrency(input: BuyCurrencyInput!): BuyCurrencyPayload

  # Create a new Publication
  createPublication(input: CreatePublicationInput!): CreatePublicationPayload

  # Credits more currency to the current user
  rechargeCurrency(input: RechargeCurrencyInput!): RechargeCurrencyPayload
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

# Publication Model
type Publication implements Node {
  # Is this publication still active?
  active: Boolean!

  # Amount
  amount: Float!

  # Currency
  currency: String!

  # Description
  description: String!

  # Reasons the object couldn't be created or updated
  errors: [String]
  id: ID!

  # Title
  title: String!

  # User this publication belongs to
  user: User
}

# The connection type for Publication.
type PublicationConnection {
  # A list of edges.
  edges: [PublicationEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type PublicationEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Publication
}

type Query {
  # The current authenticated user
  current_user: User

  # Publications
  publications(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filters publications by active
    active: Boolean
  ): PublicationConnection

  # Transactions
  transactions(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): TransactionConnection

  # All Users
  users(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): UserConnection
}

# Autogenerated input type of RechargeCurrency
input RechargeCurrencyInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  amount: Float!
  currency: Currencies!
}

# Autogenerated return type of RechargeCurrency
type RechargeCurrencyPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  transaction: Transaction
  user: User
}

# Transaction Model
type Transaction implements Node {
  # Amount
  amount: Float!

  # Currency type of the transaction
  currency: String!

  # Reasons the object couldn't be created or updated
  errors: [String]
  id: ID!

  # Type of the transaction
  transaction_type: String!

  # User this transaction belongs to
  user: User
}

# The connection type for Transaction.
type TransactionConnection {
  # A list of edges.
  edges: [TransactionEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type TransactionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Transaction
}

# User Model
type User implements Node {
  # Account Balance BTC
  account_balance_BTC: Float!

  # Account Balance USD
  account_balance_USD: Float!

  # Email of the User
  email: String!

  # Reasons the object couldn't be created or updated
  errors: [String]

  # First name
  first_name: String!
  id: ID!

  # Last name
  last_name: String!
  publications(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): PublicationConnection
  transactions(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): TransactionConnection
}

# The connection type for User.
type UserConnection {
  # A list of edges.
  edges: [UserEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type UserEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: User
}
